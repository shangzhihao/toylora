[project]
name = "toylora"
version = "0.1.0"
description = "a toy to show how lora works"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "torch>=2.8.0",
    "torchvision>=0.20.0",
]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "ruff>=0.12.11",
]

[tool.ruff]
# Exclude common directories that don't need linting
exclude = [
    ".venv",
    "__pycache__",
    ".git",
    "*.egg-info",
    "build",
    "dist",
]

# Set the maximum line length
line-length = 88

# Target Python 3.12+
target-version = "py312"

[tool.ruff.lint]
# Enable specific rule categories
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes (unused imports, undefined names, etc.)
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade (modernize Python code)
    "B",      # flake8-bugbear (likely bugs and design problems)
    "A",      # flake8-builtins (builtin shadowing)
    "C4",     # flake8-comprehensions
    "T20",    # flake8-print (print statements)
    "SIM",    # flake8-simplify
    "RUF",    # Ruff-specific rules
    
    # Additional static analysis rules
    "S",      # flake8-bandit (security issues)
    "BLE",    # flake8-blind-except (bare except clauses)
    "FBT",    # flake8-boolean-trap (boolean traps)
    "C90",    # mccabe (complexity analysis)
    "ERA",    # eradicate (commented-out code)
    "PL",     # Pylint (comprehensive static analysis)
    "TRY",    # tryceratops (exception handling)
    "PERF",   # Perflint (performance anti-patterns)
    "FURB",   # refurb (modernize and improve code)
]

# Ignore specific rules that might be too strict for this educational project
ignore = [
    "T20",    # Allow print statements for educational output
    "E501",   # Line too long (handled by line-length setting)
    "N803",   # Argument name should be lowercase (allow ML conventions)
    "N806",   # Variable in function should be lowercase (allow ML conventions)
    "PLR0402",  # Allow torch.nn as nn style imports (PyTorch convention)
    "FBT002", # Allow boolean default arguments (common in ML)
    "PLR0913", # Allow many arguments in functions (ML models need many params)
]

# Allow autofix for specific rules
fixable = [
    "F401",   # Remove unused imports
    "I001",   # Sort imports
    "UP",     # Apply pyupgrade fixes
]

# Never autofix these (they might change behavior)
unfixable = [
    "B",      # Don't autofix potential bugs
    "F841",   # Don't remove unused variables (might be intentional)
]

[tool.ruff.lint.isort]
# Configure import sorting
known-first-party = ["config", "data_util", "models", "pretrain", "finetune", "inference"]
force-single-line = false
lines-after-imports = 2

[tool.ruff.lint.mccabe]
# Complexity threshold
max-complexity = 5

[tool.ruff.format]
# Configure code formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Additional formatting options for better consistency
docstring-code-format = true      # Format code blocks in docstrings
docstring-code-line-length = 60   # Shorter lines in docstring code blocks
preview = false                   # Use stable formatting rules only

[tool.mypy]
# mypy configuration for type checking
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
strict_optional = true
show_error_codes = true
pretty = true

# Ignore missing imports for third-party libraries without stubs
ignore_missing_imports = true

